@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model List<string>

<html>
<head>
    <title>Index</title>
    <script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css" type="text/css" />


    <script type="text/javascript">
        Dropzone.options.uploadForm = { // The camelized version of the ID of the form element

  // The configuration we've talked about above
  autoProcessQueue: false,
  acceptedFiles: ".jpeg,.jpg,.png,.gif",
  addRemoveLinks: true,
  dictDefaultMessage: "Dateien hier ablegen",
  dictFallbackMessage: "Dein Browser unterstützt drag'n'drop nicht",
  dictInvalidFileType: "Dieser Dateitype ist leider nicht unterstützt",
  dictRemoveFile: "Datei löschen",

  // The setting up of the dropzone
  init: function() {
    var myDropzone = this;

    // First change the button to actually tell Dropzone to process the queue.
    this.element.querySelector("button[type=submit]").addEventListener("click", function(e) {
      // Make sure that the form isn't actually being sent.
      e.preventDefault();
      e.stopPropagation();
      myDropzone.processQueue();
    });

    this.on("addedfile", function(){
          console.log("A file has been added");
    });

    this.on("addedfile", function(file) {
        file.previewElement.addEventListener("click", function() {
        this.removeFile(file);
  });
});
    // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
    // of the sending event because uploadMultiple is set to true.
    this.on("sendingmultiple", function() {
      // Gets triggered when the form is actually being sent.
      // Hide the success button or the complete form.
    });
    this.on("successmultiple", function(files, response) {
      // Gets triggered when the files have successfully been sent.
      // Redirect user or notify of success.
    });
    this.on("errormultiple", function(files, response) {
      // Gets triggered when there was an error sending the files.
      // Maybe show form again, and notify user of error
    });
  }
 
}</script>

</head>

<body>
<div class="container">
     <div class="row">
         @foreach (var imagepath in Model)
        {
            <div class="col-md-3">
                <div class="alert alert-success" role="alert">
                    <img src="~/@imagepath" alt= "Alt Text" height="100px" width="205px"/>
                </div>
           </div>
        }
    </div>
</div>



<div class="container">
    <div>
        @using (Html.BeginForm("Index", "Upload", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
        <div class="row">
            <div class="form-group col-md-6">
                <input type="file" class="form-control" name="formFile" multiple="multiple">
            </div>
            <div class="form-group col-md-6">
                <input type="submit" class="filesubmit" name="Upload">
            </div>
        </div>
        }
         @if (TempData["notice"] != null)
    {
        <div class="alert alert-danger fade in">
            <a href="#" class="close" data-dismiss="alert">&times;</a>
            @TempData["notice"]
        </div>
    }
    </div>
</div>
<div>
    <form asp-controller="Upload" asp-action="Upload" class="dropzone" id="uploadForm">
        <button type="submit" class="btn btn-primary" name="Upload">Submit data and files!</button>
    </form>
</div>  
</body>
</html>